<?php

namespace Dhii\WpProvision\Api;

use Symfony\Component\Process\Process;
use Dhii\WpProvision\Output\OutputInterface;

/**
 * Common functionality for command results.
 *
 * @since [*next-version*]
 */
class AbstractCommandResult
{
    protected $status;
    protected $output;
    protected $process;

    /**
     * Parameterless private constructor.
     *
     * @since [*next-version*]
     */
    protected function _construct()
    {
    }

    /**
     * Retrieve the status code of the result.
     *
     * @since [*next-version*]
     *
     * @return string The status code. One of {@see CommandResultInterface}::STATUS_* constants.
     */
    protected function _getStatus()
    {
        return $this->status;
    }

    /**
     * Assign status code.
     *
     * @since [*next-version*]
     *
     * @param string $status The status code of the command.
     *
     * @return AbstractCommandResult This instance.
     */
    protected function _setStatus($status)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Retrieve the output generated by the command.
     *
     * @since [*next-version*]
     *
     * @return string|OutputInterface The data, or a data member value.
     */
    protected function _getOutput()
    {
        return $this->output;
    }

    /**
     * Assign output generated by the command.
     *
     * @since [*next-version*]
     *
     * @param string|OutputInterface $output The output of the command.
     *
     * @return AbstractCommandResult This instance.
     */
    protected function _setOutput($output)
    {
        $this->output = $output;

        return $this;
    }

    /**
     * Determine whether the command, of which this is a result, was a success.
     *
     * @since [*next-version*]
     *
     * @return bool True if the command was a success; false otherwise.
     */
    protected function _isSuccess()
    {
        return $this->_isStatusSuccessful($this->_getStatus());
    }

    /**
     * Determine whether a status code represents a successful status.
     *
     * @since [*next-version*]
     *
     * @param string $status The status code.
     *
     * @return bool True if the status is succesful; false otherwise;
     */
    protected function _isStatusSuccessful($status)
    {
        return in_array($status, [
            CommandResultInterface::STATUS_SUCCESS,
            CommandResultInterface::STATUS_INFO,
            CommandResultInterface::STATUS_WARNING,
        ], true);
    }

    /**
     * Retrieve the process that resulted from running the command.
     *
     * @since [*next-version*]
     *
     * @return Process The process.
     */
    protected function _getProcess()
    {
        return $this->process;
    }

    /**
     * Assign the process that resulted from running the command.
     *
     * @since [*next-version*]
     *
     * @param Process $process The Process.
     *
     * @return AbstractCommandResult This instance.
     */
    protected function _setProcess($process)
    {
        $this->process = $process;

        return $this;
    }
}
